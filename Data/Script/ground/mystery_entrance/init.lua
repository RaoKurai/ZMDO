--[[
    init.lua
    Created: 04/16/2021 09:18:47
    Description: Autogenerated script file for the map mystery_entrance.
]]--
-- Commonly included lua functions and data
require 'common'

-- Package name
local mystery_entrance = {}

-- Local, localized strings table
-- Use this to display the named strings you added in the strings files for the map!
-- Ex:
--      local localizedstring = MapStrings['SomeStringName']
local MapStrings = {}

-------------------------------
-- Map Callbacks
-------------------------------
---mystery_entrance.Init
--Engine callback function
function mystery_entrance.Init(map)

  --This will fill the localized strings table automatically based on the locale the game is 
  -- currently in. You can use the MapStrings table after this line!
  MapStrings = COMMON.AutoLoadLocalizedStrings()

  COMMON.RespawnPartner(true)
end

---mystery_entrance.Enter
--Engine callback function
function mystery_entrance.Enter(map)

  if not SV.mystery_entrance.IntroComplete then
    mystery_entrance.Cutscene()
  else
    GAME:FadeIn(20)
  end
  
  SV.mystery_entrance.IntroComplete = true

end

---mystery_entrance.Exit
--Engine callback function
function mystery_entrance.Exit(map)


end

---mystery_entrance.Update
--Engine callback function
function mystery_entrance.Update(map)


end


function mystery_entrance.Cutscene()

  GAME:UnlockDungeon("mystery_dungeon")
  SV.checkpoint = 
  {
    Zone    = "guildmaster_island", Segment  = -1,
    Map  = 5, Entry  = 0
  }
  
  local player = CH('PLAYER')
  local partner = CH('Partner')
  
  local swap = false
  if player.Data.BaseForm.Species == "ditto" then
  
    player = CH('PLAYER')
    partner = CH('Partner')
  else
    swap = true
    partner = CH('PLAYER')
    player = CH('Partner')
	
	
    GROUND:CharAnimateTurnTo(partner, Direction.Down, 0)
  end
  
  GAME:CutsceneMode(true)
  GAME:FadeIn(20)
  
  
  SOUND:PlayBattleSE("EVT_Emote_Exclaim_2")
  GROUND:CharSetEmote(partner, "exclaim", 1)
  GROUND:CharSetEmote(player, "exclaim", 1)
  
  
  UI:SetSpeaker(player)
  UI:WaitShowDialogue("Wha?[pause=30] Again?")
  UI:SetSpeaker(partner)
  UI:WaitShowDialogue("Aah![pause=30] Scary!")
  
  local coro1 = TASK:BranchCoroutine(function() mystery_entrance.Concurrent_Sequence(player, not swap) end)
  local coro2 = TASK:BranchCoroutine(function() mystery_entrance.Concurrent_Sequence(partner, swap) end)
  TASK:JoinCoroutines({coro1, coro2})
  
  
  GAME:WaitFrames(60)
  UI:SetSpeaker(partner)
  UI:WaitShowDialogue("Melanie...[pause=30] have you heard of that rumor about where Mystery Aspects come from?")
  UI:SetSpeaker(player)
  UI:WaitShowDialogue("Are you talking about that old legend,[pause=0] with the Mystery Dungeons?")
  
  GAME:WaitFrames(30)
  UI:SetSpeaker(partner)
  UI:WaitShowDialogue("Think about it...[pause=0] it said they were like mazes that defied all logic.")
  UI:WaitShowDialogue("Do you think that's what we could be dealing with?")
  GAME:WaitFrames(30)
  mystery_entrance.Concurrent_Sequence(player, false)
  
  GROUND:CharSetEmote(player, "happy", 4)
  UI:SetSpeaker(player)
  UI:WaitShowDialogue("Wow,[pause=30] that'd be amazing!")
  GAME:WaitFrames(30)
  SOUND:PlayBattleSE("EVT_Emote_Sweatdrop")
  GROUND:CharSetEmote(partner, "sweatdrop", 1)
  GAME:WaitFrames(60)
  UI:WaitShowDialogue("If that's true, this is a once-in-a-lifetime event![pause=0] Let's keep going!")
  GAME:CutsceneMode(false)
end

function mystery_entrance.Concurrent_Sequence(chara, goDown)
  
  if goDown then
    GAME:WaitFrames(10)
  end
  
  local turnTime = 4
  GROUND:CharSetAnim(chara, "None", true)
  GROUND:CharAnimateTurnTo(chara, Direction.Left, turnTime)
  GAME:WaitFrames(20)
  SOUND:PlayBattleSE("EVT_Emote_Confused")
  GROUND:CharAnimateTurn(chara, Direction.Right, turnTime, not goDown)
  GAME:WaitFrames(20)
  SOUND:PlayBattleSE("EVT_Emote_Confused")
  GROUND:CharAnimateTurn(chara, Direction.Left, turnTime, goDown)
  GAME:WaitFrames(20)
  GROUND:CharAnimateTurn(chara, Direction.Right, turnTime, not goDown)
  GAME:WaitFrames(40)
  local actualDir = Direction.Up
  if goDown then
    actualDir = Direction.Down
  end
  GROUND:CharAnimateTurnTo(chara, actualDir, turnTime)
  GROUND:CharSetAnim(chara, "None", false)
end

-------------------------------
-- Entities Callbacks
-------------------------------

function mystery_entrance.Exit_Touch(obj, activator)
  DEBUG.EnableDbgCoro() --Enable debugging this coroutine
  local dungeon_entrances = { "mystery_dungeon" }
  local ground_entrances = { }
  COMMON.ShowDestinationMenu(dungeon_entrances,ground_entrances)
end

function mystery_entrance.Storage_Action(obj, activator)
  DEBUG.EnableDbgCoro() --Enable debugging this coroutine
  COMMON:ShowTeamStorageMenu()
end


function mystery_entrance.Partner_Action(chara, activator)
  DEBUG.EnableDbgCoro() --Enable debugging this coroutine
  UI:SetSpeaker(chara)
  local player = CH('PLAYER')
  
  if chara.Data.BaseForm.Species == "ditto" then
    UI:WaitShowDialogue("Don't be afraid, Lumiere![pause=0] If anything scary comes our way,[pause=30] I'll fend it off...")
	local origForm = chara.Data.BaseForm
	chara.Data.BaseForm = RogueEssence.Dungeon.MonsterID("tyranitar", 0, "melanie", Gender.Male)
	UI:SetSpeaker(chara)
    SOUND:PlayBattleSE("EVT_Roar")
    UI:WaitShowDialogue("By transforming into something TEN times scarier!")
    GAME:WaitFrames(30)
	chara.Data.BaseForm = origForm
    GAME:WaitFrames(30)
    SOUND:PlayBattleSE("EVT_Emote_Sweatdrop")
    GROUND:CharSetEmote(player, "sweatdrop", 1)
  else
    SOUND:PlayBattleSE("EVT_Emote_Sweating")
    GROUND:CharSetEmote(chara, "sweating", 1)
    UI:WaitShowDialogue("It's...[pause=0] a little scary.")
    UI:WaitShowDialogue("Hold me...[pause=30] will you?")
  end
  
end

return mystery_entrance

